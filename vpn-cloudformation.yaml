---
AWSTemplateFormatVersion: '2010-09-09'

Description: 'AWS in Action: chapter 5 (OpenSwan acting as VPN IPSec endpoint)'
# reference : https://github.com/AWSinAction/code2/tree/master/chapter05

# Parameters that allow template reuse
Parameters:
  KeyName:
    Description: 'Key pair name for SSH access'
    Type: 'AWS::EC2::KeyPair::KeyName'
  VPC:
    Description: 'Just select the one and only default VPC.'
    Type: 'AWS::EC2::VPC::Id'
  Subnet:
    Description: 'Just select one of the available subnets.'
    Type: 'AWS::EC2::Subnet::Id'
  IPSecSharedSecret:
    Description: 'The shared secret key for IPSec.'
    Type: String
  VPNUser:
    Description: 'The VPN user.'
    Type: String
  VPNPassword:
    Description: 'The VPN password.'
    Type: String

# The JSON or YAML file of the CloudFormation template has a section called Mappings, 
# where the keys and values used for configuration are mapped (key values). 
# To refer to that value, use the FindInMap function.
# Keys can be nested
Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-2ed19c41'
    'eu-west-3':
      AMI: 'ami-c8a017b5'
    'eu-west-2':
      AMI: 'ami-e3051987'
    'eu-west-1':
      AMI: 'ami-760aaa0f'
    'ap-northeast-2':
      AMI: 'ami-fc862292'
    'ap-northeast-1':
      AMI: 'ami-2803ac4e'
    'sa-east-1':
      AMI: 'ami-1678037a'
    'ca-central-1':
      AMI: 'ami-ef3b838b'
    'ap-southeast-1':
      AMI: 'ami-dd7935be'
    'ap-southeast-2':
      AMI: 'ami-1a668878'
    'eu-central-1':
      AMI: 'ami-e28d098d'
    'us-east-1':
      AMI: 'ami-6057e21a'
    'us-east-2':
      AMI: 'ami-aa1b34cf'
    'us-west-1':
      AMI: 'ami-1a033c7a'
    'us-west-2':
      AMI: 'ami-32d8124a'

Resources:
  # Virtual machine description
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      SecurityGroupIds:
      - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName

      # Search with !FindinMap and return value
      # !FindInMap ["1st key" (RegionMap), "2nd key"(region name), "3rd key"(AMI)]
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      SubnetId: !Ref Subnet
      # Define a shell script as virtual machine user data
      UserData:
        # Substitution and encoding of multi-line string values
        # Fn::Base64 : Convert input string to Base64 representation
        # Fn::Sub    : Resolve the value of a variable when creating a stack of a string containing variables inside
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          export IPSEC_PSK="${IPSecSharedSecret}"
          # Export parameters to environment variables
          export VPN_USER="${VPNUser}"
          export VPN_PASSWORD="${VPNPassword}"
          # Get and execute a shell script
          # -s (--silent): Do not show progress
          curl -s https://raw.githubusercontent.com/AWSinAction/code2/master/chapter05/vpn-setup.sh | bash -ex
          # Notify CloudFormation of the end of the script
          # You can use the CreationPolicy attribute and the cfn-signal helper script to ensure that 
          # the stack is created successfully only when the application is successfully deployed
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
    # Wait 10 minutes for notification from cft-signal executing user data
    # If the success signal is not sent from the activated EC2 within 10 minutes, it will roll back
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to VPN server'
      VpcId: !Ref VPC
      # 500, 1701, 4500 ports are needed for L2TP/IPsec
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'
      - IpProtocol: udp
        FromPort: 500
        ToPort: 500
        CidrIp: '0.0.0.0/0'
      - IpProtocol: udp
        FromPort: 1701
        ToPort: 1701
        CidrIp: '0.0.0.0/0'
      - IpProtocol: udp
        FromPort: 4500
        ToPort: 4500
        CidrIp: '0.0.0.0/0'
Outputs:
  ServerIP:
    Description: 'Public IP address of the vpn server'
    Value: !GetAtt 'EC2Instance.PublicIp'
  IPSecSharedSecret:
    Description: 'The shared key for the VPN connection (IPSec)'
    Value: !Ref IPSecSharedSecret
  VPNUser:
    Description: 'The username for the vpn connection'
    Value: !Ref VPNUser
  VPNPassword:
    Description: 'The password for the vpn connection'
    Value: !Ref VPNPassword